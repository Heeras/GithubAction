name: Sanity in GCC env
on: [push, pull_request]
jobs:
  cypress-run:
    runs-on: ubuntu-20.04
    name: Run sanity in GCC env
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Git checkout
        uses: actions/checkout@v2
      - name: get total count from json
        id: total
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.tests"
      - name: Total Object
        if: always()
        run: echo '${{steps.total.outputs.prop}}'
        env:
          TOTAL_TESTS: '${{steps.total.outputs.prop}}'
      - name: get pass count from json
        id: pass
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.passes"
      - name: Pass Object
        if: always()
        run: echo '${{steps.pass.outputs.prop}}'
        env:
          PASSED_TESTS: '${{steps.pass.outputs.prop}}'
      - name: get skipped count from json
        id: skipped
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.skipped"
        continue-on-error: true
      - name: Skipped Object
        if: always()
        run: echo '${{steps.skipped.outputs.prop}}'
        continue-on-error: true
      - name: get pending count from json
        id: pending
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.pending"
      - name: Pending Object
        if: always()
        run: echo '${{steps.pending.outputs.prop}}'
        env:
          PENDING_TESTS: '${{steps.pending.outputs.prop}}'
      - name: get failed count from json
        id: failed
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.failures"
      - name: Failed Object
        if: always()
        run: echo '${{steps.failed.outputs.prop}}'
        env:
          FAILED_TESTS: '${{steps.failed.outputs.prop}}'
      - name: Get JSON Data
        run: |
          JSON=$(cat ./index.json)
          total_tests=`echo $(jq -r '.stats.tests' <<< "$JSON")`
          passed_tests=`echo $(jq -r '.stats.passes' <<< "$JSON")`
          pending_tests=`echo $(jq -r '.stats.pending' <<< "$JSON")`
          failed_tests=`echo $(jq -r '.stats.failures' <<< "$JSON")`
          skipped_tests=`echo $(jq -r '.stats.skipped' <<< "$JSON")`
          echo $total_tests $passed_tests $pending_tests $failed_tests $skipped_tests
          echo "::set-output name=total_tests::$total_tests"
          echo "::set-output name=passed_tests::$passed_tests"
          echo "::set-output name=pending_tests::$pending_tests"
          echo "::set-output name=failed_tests::$failed_tests"
          echo "::set-output name=skipped_tests::$skipped_tests"
      - name: Print JSON Data
        run: |
          echo "${{steps.set_var.outputs.total_tests}}"
          echo "${{steps.set_var.outputs.passed_tests}}"
          echo "${{steps.set_var.outputs.pending_tests}}"
          echo "${{steps.set_var.outputs.failed_tests}}"
          echo "${{steps.set_var.outputs.skipped_tests}}"


