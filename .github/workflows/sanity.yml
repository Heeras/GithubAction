name: Sanity in GCC env
on: [push, pull_request]
jobs:
  cypress-run:
    runs-on: ubuntu-20.04
    name: Run sanity in GCC env
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Git checkout
        uses: actions/checkout@v2
      - name: get total count from json
        id: total
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.tests"
      - name: Total Object
        if: always()
        run: echo '${{steps.total.outputs.prop}}'
        env:
          TOTAL_TESTS: '${{steps.total.outputs.prop}}'
      - name: get pass count from json
        id: pass
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.passes"
      - name: Pass Object
        if: always()
        run: echo '${{steps.pass.outputs.prop}}'
        env:
          PASSED_TESTS: '${{steps.pass.outputs.prop}}'
      - name: get skipped count from json
        id: skipped
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.skipped"
        continue-on-error: true
      - name: Skipped Object
        if: always()
        run: echo '${{steps.skipped.outputs.prop}}'
        continue-on-error: true
      - name: get pending count from json
        id: pending
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.pending"
      - name: Pending Object
        if: always()
        run: echo '${{steps.pending.outputs.prop}}'
        env:
          PENDING_TESTS: '${{steps.pending.outputs.prop}}'
      - name: get failed count from json
        id: failed
        uses: notiz-dev/github-action-json-property@release
        if: always()
        with:
          path: index.json
          prop_path: "stats.failures"
      - name: Failed Object
        if: always()
        run: echo '${{steps.failed.outputs.prop}}'
        env:
          FAILED_TESTS: '${{steps.failed.outputs.prop}}'
      - name: Test
        id: set_var
        run: |
          content= cat index.json
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      - run: |
          echo "${{fromJson(steps.set_var.outputs.packageJson).version}}"
